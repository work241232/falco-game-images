name: Auto Download Game Images

on:
  issues:
    types: [opened, labeled] # Trigger on opened or labeled

jobs:
  download-image:
    runs-on: ubuntu-latest
    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    # Updated condition to handle 'opened' and 'labeled' events specifically for 'image-request'
    if: >
      github.event.issue.state == 'open' &&
      !contains(github.event.issue.labels.*.name, 'completed') &&
      (
        (github.event.action == 'opened' && contains(github.event.issue.labels.*.name, 'image-request')) ||
        (github.event.action == 'labeled' && github.event.label.name == 'image-request')
      )
    
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract image information
        id: extract
        shell: bash
        run: |
          echo "Attempting to extract information from issue body:"
          echo "${{ github.event.issue.body }}"
          echo "-------------------------------------"
          
          # Extract Image URL using grep and sed
          IMAGE_URL=$(echo "${{ github.event.issue.body }}" | grep "Image URL:" | sed 's/Image URL: //' | head -n 1)
          echo "Extracted Image URL: $IMAGE_URL"
          
          # Extract Target Filename using grep and sed
          TARGET_FILENAME=$(echo "${{ github.event.issue.body }}" | grep "Target filename:" | sed -e 's/Target filename: `//' -e 's/`//' | head -n 1)
          echo "Extracted Target filename (raw): $TARGET_FILENAME"
          
          # Extract Game Name (only needed if filename wasn't explicitly provided)
          GAME_NAME=$(echo "${{ github.event.issue.body }}" | grep "Game:" | sed 's/Game: //' | head -n 1)
          echo "Extracted Game name: $GAME_NAME"
          
          # Generate filename from game name if not found OR sanitize explicit filename
          if [ -z "$TARGET_FILENAME" ]; then
            if [ -n "$GAME_NAME" ]; then
              echo "Target filename not found, generating from game name..."
              SANITIZED_NAME=$(echo "$GAME_NAME" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9._-]/_/g' -e 's/__*/_/g') # Allow ., _,-
              TARGET_FILENAME="${SANITIZED_NAME}.jpg" # Assuming jpg, adjust if needed
              echo "Generated target filename: $TARGET_FILENAME"
            fi
          else
             echo "Sanitizing explicit target filename..."
             # Sanitize the explicitly provided filename
             SANITIZED_FILENAME=$(echo "$TARGET_FILENAME" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^a-z0-9._-]/_/g' -e 's/__*/_/g') # Allow ., _,-
             # Ensure it has a common image extension if missing (optional, based on needs)
             if [[ ! "$SANITIZED_FILENAME" =~ \.(jpg|jpeg|png|webp|gif)$ ]]; then
               echo "Warning: Sanitized filename '$SANITIZED_FILENAME' lacks a common image extension. Appending .jpg"
               SANITIZED_FILENAME="${SANITIZED_FILENAME}.jpg"
             fi
             TARGET_FILENAME="$SANITIZED_FILENAME"
             echo "Sanitized target filename: $TARGET_FILENAME"
          fi
          
          # Validate extracted/generated data
          if [ -z "$IMAGE_URL" ] || [ -z "$TARGET_FILENAME" ]; then
            echo "::error::Could not extract required IMAGE_URL or determine a valid TARGET_FILENAME from the issue body. Please check the issue format."
            echo "Issue Body Content Was:"
            echo "${{ github.event.issue.body }}"
            exit 1 # Fail the step
          fi
          
          # Save the results to GitHub Actions outputs
          echo "image_url=$IMAGE_URL" >> "$GITHUB_OUTPUT"
          echo "target_filename=$TARGET_FILENAME" >> "$GITHUB_OUTPUT"
          echo "game_name=$GAME_NAME" >> "$GITHUB_OUTPUT"
          echo "Extraction successful."
      
      - name: Download image
        if: steps.extract.outputs.image_url != '' && steps.extract.outputs.target_filename != ''
        id: download
        run: |
          mkdir -p images
          curl -L "${{ steps.extract.outputs.image_url }}" -o "images/${{ steps.extract.outputs.target_filename }}"
          echo "Image downloaded to images/${{ steps.extract.outputs.target_filename }}"
          ls -la images/
          echo "success=true" >> "$GITHUB_OUTPUT"
      
      - name: Commit and push changes
        if: steps.extract.outputs.image_url != '' && steps.extract.outputs.target_filename != '' && steps.download.outputs.success == 'true'
        id: commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config pull.rebase false # Ensure merge strategy

          FILENAME="${{ steps.extract.outputs.target_filename }}"
          GAME_NAME_OR_FILENAME="${{ steps.extract.outputs.game_name || steps.extract.outputs.target_filename }}"

          # Pull latest changes FIRST
          echo "Pulling latest changes from origin/${{ github.ref_name }}..."
          git pull origin ${{ github.ref_name }}
          echo "Pull complete."

          # Now check if file exists and add/commit
          if [ -f "images/$FILENAME" ]; then
            echo "Adding file: images/$FILENAME"
            git add "images/$FILENAME"
            # Check if there are changes staged for commit
            if ! git diff --staged --quiet; then
              echo "Committing changes..."
              git commit -m "Add image: $FILENAME (for $GAME_NAME_OR_FILENAME)"
              echo "Pushing changes..."
              git push origin ${{ github.ref_name }}
              echo "Changes committed and pushed."
            else
              echo "File images/$FILENAME already exists and is up-to-date. No changes to commit."
            fi
          else
             echo "Downloaded file images/$FILENAME not found after pull. Skipping commit."
             # Optionally, fail the step if the file should definitely exist
             # exit 1
          fi
          echo "success=true" >> "$GITHUB_OUTPUT"
      
      - name: Comment on issue and Close
        if: steps.download.outputs.success == 'true' && steps.commit.outputs.success == 'true' && github.event.issue.state == 'open'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Image has been automatically downloaded and added to the repository as `images/${{ steps.extract.outputs.target_filename }}`.'
            });
            const currentLabels = context.payload.issue.labels.map(l => l.name);
            const newLabels = [...new Set([...currentLabels, 'automated', 'completed'])];
            
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: newLabels
            });
      
      - name: Comment on error
        if: (failure() || steps.download.outputs.success != 'true' || steps.commit.outputs.success != 'true') && github.event.issue.state == 'open'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Failed to automatically download and add the image. Manual intervention required.'
            });
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-manual-intervention']
            });