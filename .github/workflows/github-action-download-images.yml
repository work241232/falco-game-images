name: Auto Download Game Images

on:
  issues:
    types: [opened, edited]

jobs:
  download-image:
    runs-on: ubuntu-latest
    if: github.event.issue.state == 'open' && contains(github.event.issue.labels.*.name, 'image-request') && !contains(github.event.issue.labels.*.name, 'completed')
    
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract image information
        id: extract
        shell: bash
        run: |
          # Memorizza il corpo dell'issue in un file temporaneo per un'elaborazione più sicura
          echo '${{ github.event.issue.body }}' > issue_body.txt
          
          # Usa grep per estrarre i dati in modo sicuro
          IMAGE_URL=""
          if grep -q "Image URL:" issue_body.txt; then
            IMAGE_URL=$(grep "Image URL:" issue_body.txt | sed 's/Image URL: //')
          fi
          echo "Image URL: $IMAGE_URL"
          
          TARGET_FILENAME=""
          if grep -q "Target filename:" issue_body.txt; then
            TARGET_FILENAME=$(grep "Target filename:" issue_body.txt | sed 's/Target filename: `//' | sed 's/`//')
          fi
          echo "Target filename: $TARGET_FILENAME"
          
          GAME_NAME=""
          if [ -z "$TARGET_FILENAME" ] && grep -q "Game:" issue_body.txt; then
            GAME_NAME=$(grep "Game:" issue_body.txt | sed 's/Game: //')
            echo "Game name: $GAME_NAME"
            
            if [ -n "$GAME_NAME" ]; then
              SANITIZED_NAME=$(echo "$GAME_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g')
              TARGET_FILENAME="${SANITIZED_NAME}.jpg"
              echo "Generated target filename: $TARGET_FILENAME"
            fi
          fi
          
          # Salva i risultati usando la nuova sintassi di GitHub Actions
          echo "image_url=$IMAGE_URL" >> "$GITHUB_OUTPUT"
          echo "target_filename=$TARGET_FILENAME" >> "$GITHUB_OUTPUT"
          echo "game_name=$GAME_NAME" >> "$GITHUB_OUTPUT"
      
      - name: Download image
        if: steps.extract.outputs.image_url != '' && steps.extract.outputs.target_filename != ''
        id: download
        run: |
          mkdir -p images
          curl -L "${{ steps.extract.outputs.image_url }}" -o "images/${{ steps.extract.outputs.target_filename }}"
          echo "Image downloaded to images/${{ steps.extract.outputs.target_filename }}"
          ls -la images/
          echo "success=true" >> "$GITHUB_OUTPUT"
      
      - name: Commit and push changes
        if: steps.extract.outputs.image_url != '' && steps.extract.outputs.target_filename != '' && steps.download.outputs.success == 'true'
        id: commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          FILENAME="${{ steps.extract.outputs.target_filename }}"
          if [ -f "images/$FILENAME" ]; then
            git add "images/$FILENAME"
            if ! git diff --staged --quiet; then
              git commit -m "Add image for ${{ steps.extract.outputs.game_name || steps.extract.outputs.target_filename }}" 
              git push
              echo "Changes committed and pushed."
            else
              echo "No changes to commit."
            fi
          else
             echo "Downloaded file images/$FILENAME not found. Skipping commit."
          fi
          echo "success=true" >> "$GITHUB_OUTPUT"
      
      - name: Comment on issue and Close
        if: steps.download.outputs.success == 'true' && steps.commit.outputs.success == 'true' && github.event.issue.state == 'open'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Image has been automatically downloaded and added to the repository as `images/${{ steps.extract.outputs.target_filename }}`.'
            });
            const currentLabels = context.payload.issue.labels.map(l => l.name);
            const newLabels = [...new Set([...currentLabels, 'automated', 'completed'])];
            
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: newLabels
            });
      
      - name: Comment on error
        if: (failure() || steps.download.outputs.success != 'true' || steps.commit.outputs.success != 'true') && github.event.issue.state == 'open'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Failed to automatically download and add the image. Manual intervention required.'
            });
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-manual-intervention']
            });