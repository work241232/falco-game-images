name: Auto Download Game Images

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  download-image:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'image-request') && !contains(github.event.issue.labels.*.name, 'completed') && !contains(github.event.issue.labels.*.name, 'processing')
    
    steps:
      - name: Add processing label
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['processing']
            });
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üîÑ Processing image download request...'
            });
      
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3
        continue-on-error: true
      
      - name: Check checkout
        if: steps.checkout.outcome != 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå Failed to checkout repository. Manual intervention required.'
            });
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-manual-intervention']
            });
            github.rest.issues.removeLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: ['processing']
            });
        continue-on-error: true
      
      - name: Set up Node.js
        if: steps.checkout.outcome == 'success'
        uses: actions/setup-node@v3
        with:
          node-version: 16
      
      - name: Extract image information
        if: steps.checkout.outcome == 'success'
        id: extract
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Estrai URL dell'immagine
          IMAGE_URL=$(echo "$ISSUE_BODY" | grep -oP 'Image URL: \K(http[s]?:\/\/[^\s]+)' || echo "")
          
          # Estrai nome del file di destinazione
          TARGET_FILENAME=$(echo "$ISSUE_BODY" | grep -oP 'Target filename: `\K([^`]+)' || echo "")
          # Rimuovi backtick se √® ancora presente
          TARGET_FILENAME="${TARGET_FILENAME//\`/}"
          
          # Se target filename non √® stato trovato, estrai il nome del gioco e sanitizzalo
          if [ -z "$TARGET_FILENAME" ]; then
            GAME_NAME=$(echo "$ISSUE_BODY" | grep -oP 'Game: \K([^\n]+)' || echo "")
            if [ -n "$GAME_NAME" ]; then
              TARGET_FILENAME="$(echo "$GAME_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g').jpg"
            fi
          fi
          
          # Verifica che le variabili non siano vuote e gestiscile in modo sicuro
          if [ -n "$IMAGE_URL" ]; then
            echo "image_url=$IMAGE_URL" >> "$GITHUB_OUTPUT"
            echo "Extracted image URL: $IMAGE_URL"
          else
            echo "image_url=" >> "$GITHUB_OUTPUT"
            echo "No image URL found"
          fi
          
          if [ -n "$TARGET_FILENAME" ]; then
            echo "target_filename=$TARGET_FILENAME" >> "$GITHUB_OUTPUT"
            echo "Target filename: $TARGET_FILENAME"
          else
            echo "target_filename=" >> "$GITHUB_OUTPUT"
            echo "No target filename found"
          fi
          
          if [ -n "$GAME_NAME" ]; then
            echo "game_name=$GAME_NAME" >> "$GITHUB_OUTPUT"
            echo "Game name: $GAME_NAME"
          else
            echo "game_name=" >> "$GITHUB_OUTPUT"
            echo "No game name found"
          fi
      
      - name: Validate extraction
        if: steps.checkout.outcome == 'success'
        id: validate
        run: |
          if [ -z "${{ steps.extract.outputs.image_url }}" ]; then
            echo "valid=false" >> "$GITHUB_OUTPUT"
            echo "reason=No image URL found in issue body" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          if [ -z "${{ steps.extract.outputs.target_filename }}" ]; then
            echo "valid=false" >> "$GITHUB_OUTPUT"
            echo "reason=No target filename could be determined" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          echo "valid=true" >> "$GITHUB_OUTPUT"
      
      - name: Report invalid extraction
        if: steps.checkout.outcome == 'success' && steps.validate.outputs.valid != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå Could not process image request: ${{ steps.validate.outputs.reason }}. Please check the issue format.`
            });
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-manual-intervention']
            });
            github.rest.issues.removeLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: ['processing']
            });
      
      - name: Download image
        if: steps.checkout.outcome == 'success' && steps.validate.outputs.valid == 'true'
        id: download
        run: |
          mkdir -p images
          FILENAME="${{ steps.extract.outputs.target_filename }}"
          URL="${{ steps.extract.outputs.image_url }}"
          
          echo "Downloading image from $URL to images/$FILENAME"
          HTTP_CODE=$(curl -L "$URL" -o "images/$FILENAME" -w "%{http_code}")
          echo "http_code=$HTTP_CODE" >> "$GITHUB_OUTPUT"
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "success=true" >> "$GITHUB_OUTPUT"
            echo "Image downloaded to images/$FILENAME"
            ls -la images/
          else
            echo "success=false" >> "$GITHUB_OUTPUT"
            echo "Failed to download image, HTTP code: $HTTP_CODE"
          fi
      
      - name: Report download failure
        if: steps.checkout.outcome == 'success' && steps.validate.outputs.valid == 'true' && steps.download.outputs.success != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå Failed to download image from URL. HTTP Status: ${{ steps.download.outputs.http_code }}. Manual intervention required.`
            });
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-manual-intervention']
            });
            github.rest.issues.removeLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: ['processing']
            });
      
      - name: Commit and push changes
        if: steps.checkout.outcome == 'success' && steps.validate.outputs.valid == 'true' && steps.download.outputs.success == 'true'
        id: commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          FILENAME="${{ steps.extract.outputs.target_filename }}"
          git add "images/$FILENAME"
          git commit -m "Add image for ${{ steps.extract.outputs.game_name || steps.extract.outputs.target_filename }}"
          git push
          echo "success=true" >> "$GITHUB_OUTPUT"
        continue-on-error: true
      
      - name: Report commit failure
        if: steps.checkout.outcome == 'success' && steps.validate.outputs.valid == 'true' && steps.download.outputs.success == 'true' && steps.commit.outcome != 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå Failed to commit the image to repository. Manual intervention required.`
            });
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-manual-intervention']
            });
            github.rest.issues.removeLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: ['processing']
            });
      
      - name: Complete successfully
        if: steps.checkout.outcome == 'success' && steps.validate.outputs.valid == 'true' && steps.download.outputs.success == 'true' && steps.commit.outcome == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Image has been successfully downloaded and added to the repository as `images/${{ steps.extract.outputs.target_filename }}`.'
            });
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: ['image-request', 'automated', 'completed']
            });
            github.rest.issues.removeLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: ['processing']
            });