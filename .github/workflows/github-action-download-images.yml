name: Auto Download Game Images

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  issues: write

jobs:
  download-image:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'image-request') && !contains(github.event.issue.labels.*.name, 'completed')
    
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false # Importante: non persistere le credenziali predefinite
          fetch-depth: 0
      
      - name: Extract image information
        id: extract
        shell: bash
        run: |
          # Scrivi il corpo dell'issue in un file per debug
          echo "Corpo dell'issue:"
          echo '${{ github.event.issue.body }}'
          echo "-----------------------------------"
          
          # Memorizza il corpo dell'issue in un file temporaneo senza interpretazione
          echo '${{ github.event.issue.body }}' > issue_body.txt
          
          # Extra debug
          echo "Contenuto di issue_body.txt:"
          cat issue_body.txt
          echo "-----------------------------------"
          
          # Usa comandi più sicuri per estrarre i dati
          # Estrazione dell'URL dell'immagine
          IMAGE_URL=$(grep -o 'Image URL: [^ ]*' issue_body.txt | cut -d' ' -f3- || echo "")
          echo "URL dell'immagine estratto: ${IMAGE_URL}"
          
          # Estrazione del nome del file target
          TARGET_FILENAME=""
          if grep -q "Target filename:" issue_body.txt; then
            # Gestione speciale per estrarre il contenuto tra backticks
            TARGET_LINE=$(grep "Target filename:" issue_body.txt)
            # Cerca tutto dopo `Target filename: ` fino alla fine della riga
            TARGET_FILENAME=$(echo "$TARGET_LINE" | sed -E 's/.*Target filename: `?([^`]*)`?.*/\1/')
            echo "Nome file target estratto: ${TARGET_FILENAME}"
          fi
          
          # Estrazione del nome del gioco
          GAME_NAME=""
          if [ -z "$TARGET_FILENAME" ] && grep -q "Game:" issue_body.txt; then
            GAME_LINE=$(grep "Game:" issue_body.txt)
            GAME_NAME=$(echo "$GAME_LINE" | sed -E 's/.*Game: (.*)/\1/')
            echo "Nome del gioco estratto: ${GAME_NAME}"
            
            if [ -n "$GAME_NAME" ]; then
              SANITIZED_NAME=$(echo "$GAME_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g')
              TARGET_FILENAME="${SANITIZED_NAME}.jpg"
              echo "Nome file target generato: ${TARGET_FILENAME}"
            fi
          fi
          
          # Verifica che tutte le variabili necessarie siano state estratte correttamente
          if [ -z "$IMAGE_URL" ]; then
            echo "ERRORE: URL dell'immagine non trovato!"
          fi
          
          if [ -z "$TARGET_FILENAME" ]; then
            echo "ERRORE: Nome del file target non trovato!"
          fi
          
          # Salva i risultati in modo sicuro
          echo "image_url=${IMAGE_URL}" >> "$GITHUB_OUTPUT"
          echo "target_filename=${TARGET_FILENAME}" >> "$GITHUB_OUTPUT"
          echo "game_name=${GAME_NAME}" >> "$GITHUB_OUTPUT"
      
      - name: Download image
        if: steps.extract.outputs.image_url != '' && steps.extract.outputs.target_filename != ''
        id: download
        run: |
          mkdir -p images
          curl -L "${{ steps.extract.outputs.image_url }}" -o "images/${{ steps.extract.outputs.target_filename }}"
          echo "Image downloaded to images/${{ steps.extract.outputs.target_filename }}"
          ls -la images/
          echo "success=true" >> "$GITHUB_OUTPUT"
      
      - name: Commit and push changes
        if: steps.extract.outputs.image_url != '' && steps.extract.outputs.target_filename != ''
        id: commit
        run: |
          # Verifica l'esistenza del file
          FILENAME="${{ steps.extract.outputs.target_filename }}"
          echo "Verifying file images/$FILENAME exists..."
          if [ -f "images/$FILENAME" ]; then
            echo "File exists, proceeding with commit."
            ls -la images/
          else
            echo "ERROR: File does not exist! Cannot commit."
            echo "Current directory content:"
            ls -la
            echo "Images directory content:"
            ls -la images/ || echo "Images directory not found!"
            exit 1
          fi
          
          # Configura git
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Imposta il token per authentication
          REPO_URL="https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}"
          git remote set-url origin "$REPO_URL"
          
          # Verifica se il file esiste già nel repository remoto
          echo "Checking if the file already exists in the repository..."
          git ls-remote --heads origin main > /dev/null
          if [ $? -ne 0 ]; then
            echo "Failed to check remote repository. Check your token permissions."
            exit 1
          fi
          
          # Crea un branch temporaneo univoco per questa specifica immagine
          BRANCH_NAME="image-upload-${FILENAME}-$(date +%s)"
          echo "Creating temporary branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          
          # Aggiungi il file
          git add "images/$FILENAME"
          
          # Debug git status dopo add
          echo "Git status after add:"
          git status
          
          # Esegui il commit
          git commit -m "Add image for ${{ steps.extract.outputs.game_name || steps.extract.outputs.target_filename }}"
          
          # Debug del commit
          echo "Latest commit:"
          git log -1
          
          # Esegui il push del branch temporaneo
          echo "Pushing to temporary branch $BRANCH_NAME..."
          git push origin "$BRANCH_NAME"
          
          # Verifica il risultato del push
          PUSH_RESULT=$?
          if [ $PUSH_RESULT -ne 0 ]; then
            echo "Failed to push to temporary branch. Exiting."
            exit 1
          fi
          
          # Crea una pull request tramite GitHub API
          echo "Creating a pull request to merge the image..."
          PR_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{
              "title": "Add image: '"$FILENAME"'",
              "head": "'"$BRANCH_NAME"'",
              "base": "main",
              "body": "Automatically created PR to add image for '"$FILENAME"'",
              "maintainer_can_modify": true
            }')
          
          # Estrai l'ID della PR
          PR_NUMBER=$(echo "$PR_RESPONSE" | grep -o '"number": [0-9]*' | cut -d' ' -f2 || echo "")
          if [ -z "$PR_NUMBER" ]; then
            echo "Failed to create pull request or extract PR number. Check the API response:"
            echo "$PR_RESPONSE"
            echo "Trying direct merge as a fallback..."
            
            # Tenta di fare checkout e merge sul main come fallback
            git fetch origin main
            git checkout main
            git reset --hard origin/main
            git checkout -b "direct-upload-$BRANCH_NAME"
            git add "images/$FILENAME"
            git commit -m "Direct add image for ${{ steps.extract.outputs.game_name || steps.extract.outputs.target_filename }}"
            git push origin HEAD:main --force
            
            if [ $? -eq 0 ]; then
              echo "Direct push successful!"
              echo "success=true" >> "$GITHUB_OUTPUT"
              exit 0
            else
              echo "Both PR creation and direct push failed. Manual intervention required."
              exit 1
            fi
          fi
          
          # Merge immediato della PR
          echo "Merging pull request #$PR_NUMBER..."
          MERGE_RESPONSE=$(curl -s -X PUT \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
            -d '{
              "commit_title": "Merge: Add image '"$FILENAME"'", 
              "commit_message": "Automatically merging image upload", 
              "merge_method": "squash"
            }')
          
          # Verifica se il merge ha avuto successo
          if echo "$MERGE_RESPONSE" | grep -q '"merged": true'; then
            echo "Pull request #$PR_NUMBER merged successfully!"
            echo "success=true" >> "$GITHUB_OUTPUT"
          else
            echo "Failed to merge pull request. Response:"
            echo "$MERGE_RESPONSE"
            echo "Manual merge required for PR #$PR_NUMBER"
            exit 1
          fi
      
      - name: Comment on issue
        if: steps.extract.outputs.image_url != '' && steps.extract.outputs.target_filename != '' && steps.download.outputs.success == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Image has been automatically downloaded and added to the repository as `images/${{ steps.extract.outputs.target_filename }}`.'
            });
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: ['image-request', 'automated', 'completed']
            });
      
      - name: Comment on error
        if: failure() || (steps.extract.outputs.image_url == '') || (steps.extract.outputs.target_filename == '')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Failed to automatically download and add the image. Manual intervention required.'
            });
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-manual-intervention']
            });