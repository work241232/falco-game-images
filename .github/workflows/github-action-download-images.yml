name: Auto Download Game Images

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  download-image:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'image-request') && !contains(github.event.issue.labels.*.name, 'completed')
    
    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3
      
      - name: Extract image information
        id: extract
        shell: bash
        run: |
          # Scrivi il contenuto dell'issue in un file di log
          echo "Issue body:" > issue_log.txt
          echo '${{ github.event.issue.body }}' >> issue_log.txt
          
          # Usa un approccio più semplice e diretto per estrarre i dati
          ISSUE_BODY='${{ github.event.issue.body }}'
          
          # Estrai il nome del gioco
          GAME_NAME=""
          if [[ "$ISSUE_BODY" =~ Game:[[:space:]]*([^$'\n']*) ]]; then
            GAME_NAME="${BASH_REMATCH[1]}"
            echo "Game name extracted: $GAME_NAME"
          else
            echo "Failed to extract game name"
          fi
          
          # Estrai l'URL dell'immagine
          IMAGE_URL=""
          if [[ "$ISSUE_BODY" =~ Image[[:space:]]URL:[[:space:]]*([^$'\n']*) ]]; then
            IMAGE_URL="${BASH_REMATCH[1]}"
            echo "Image URL extracted: $IMAGE_URL"
          else
            echo "Failed to extract image URL"
          fi
          
          # Estrai il nome del file target o generane uno dal nome del gioco
          TARGET_FILENAME=""
          if [[ "$ISSUE_BODY" =~ Target[[:space:]]filename:[[:space:]]*\`?([^\`$'\n']*)\`? ]]; then
            TARGET_FILENAME="${BASH_REMATCH[1]}"
            echo "Target filename extracted: $TARGET_FILENAME"
          elif [[ -n "$GAME_NAME" ]]; then
            # Genera nome file dal nome del gioco
            SANITIZED_NAME=$(echo "$GAME_NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]/_/g')
            TARGET_FILENAME="${SANITIZED_NAME}.jpg"
            echo "Generated target filename: $TARGET_FILENAME"
          fi
          
          # Salva i risultati usando GITHUB_OUTPUT
          {
            echo "game_name=$GAME_NAME"
            echo "image_url=$IMAGE_URL"
            echo "target_filename=$TARGET_FILENAME"
          } >> "$GITHUB_OUTPUT"
      
      - name: Check if image already exists
        id: check_existing
        run: |
          FILENAME="${{ steps.extract.outputs.target_filename }}"
          GITHUB_URL="https://raw.githubusercontent.com/${{ github.repository }}/main/images/$FILENAME"
          
          echo "Checking if image already exists at: $GITHUB_URL"
          
          # Usa curl per verificare se l'immagine esiste già
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$GITHUB_URL")
          
          if [ "$STATUS_CODE" -eq 200 ]; then
            echo "Image already exists in the repository"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "Image does not exist (HTTP status: $STATUS_CODE)"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Comment if image already exists
        if: steps.check_existing.outputs.exists == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ The image `${{ steps.extract.outputs.target_filename }}` already exists in the repository at: https://raw.githubusercontent.com/${{ github.repository }}/main/images/${{ steps.extract.outputs.target_filename }}'
            });
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: ['image-request', 'automated', 'already-exists']
            });
      
      - name: Download image
        if: steps.extract.outputs.image_url != '' && steps.extract.outputs.target_filename != '' && steps.check_existing.outputs.exists == 'false'
        id: download
        run: |
          mkdir -p images
          echo "Downloading image from ${{ steps.extract.outputs.image_url }}"
          curl -L "${{ steps.extract.outputs.image_url }}" -o "images/${{ steps.extract.outputs.target_filename }}"
          
          # Verifica che il download sia riuscito
          if [ -f "images/${{ steps.extract.outputs.target_filename }}" ]; then
            echo "Image downloaded successfully"
            echo "success=true" >> "$GITHUB_OUTPUT"
          else
            echo "Download failed"
            echo "success=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
      
      - name: Simple commit and push
        if: steps.extract.outputs.target_filename != '' && steps.check_existing.outputs.exists == 'false' && steps.download.outputs.success == 'true'
        run: |
          FILENAME="${{ steps.extract.outputs.target_filename }}"
          
          # Configura git 
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Aggiungi solo il file specifico
          git add "images/$FILENAME"
          
          # Commit
          git commit -m "Add image for ${{ steps.extract.outputs.game_name }}"
          
          # Push diretto - gli errori verranno gestiti dal fallback
          git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main || echo "Direct push failed, trying fallback method..."
      
      - name: Fallback method - create branch and PR
        if: steps.extract.outputs.target_filename != '' && steps.check_existing.outputs.exists == 'false' && steps.download.outputs.success == 'true' && failure()
        run: |
          FILENAME="${{ steps.extract.outputs.target_filename }}"
          BRANCH_NAME="add-image-$(date +%s)"
          
          # Configura git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Crea un branch e fai checkout
          git checkout -b "$BRANCH_NAME"
          
          # Aggiungi il file
          git add "images/$FILENAME"
          
          # Commit
          git commit -m "Add image for ${{ steps.extract.outputs.game_name }}"
          
          # Push al branch
          git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git "$BRANCH_NAME"
          
          # Crea PR
          gh pr create --title "Add image for ${{ steps.extract.outputs.game_name }}" \
                      --body "Automatically created PR to add image for ${{ steps.extract.outputs.game_name }}" \
                      --base main \
                      --head "$BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
      
      - name: Comment on issue after successful upload
        if: steps.extract.outputs.target_filename != '' && steps.check_existing.outputs.exists == 'false' && steps.download.outputs.success == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Image has been successfully downloaded and added to the repository as `images/${{ steps.extract.outputs.target_filename }}`.'
            });
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: ['image-request', 'automated', 'completed']
            });
      
      - name: Comment on error
        if: failure() || (steps.extract.outputs.image_url == '') || (steps.extract.outputs.target_filename == '')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Failed to process this image request. Please check the action logs for more details.'
            });
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-manual-intervention']
            });